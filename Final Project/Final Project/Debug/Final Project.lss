
Final Project.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000005ac  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000001a  00800060  000005ac  00000620  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  0000063a  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000066c  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 000000f0  00000000  00000000  000006a8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000f7c  00000000  00000000  00000798  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000095b  00000000  00000000  00001714  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008f2  00000000  00000000  0000206f  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000001a8  00000000  00000000  00002964  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000044c  00000000  00000000  00002b0c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000080a  00000000  00000000  00002f58  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 000000f0  00000000  00000000  00003762  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ea       	ldi	r30, 0xAC	; 172
  68:	f5 e0       	ldi	r31, 0x05	; 5
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	aa 37       	cpi	r26, 0x7A	; 122
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 b2 01 	call	0x364	; 0x364 <main>
  7a:	0c 94 d4 02 	jmp	0x5a8	; 0x5a8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <leds_init>:
#include "LEDs.h"

void leds_init(){
	
	set_bit(DDRA , 4);
  82:	8a b3       	in	r24, 0x1a	; 26
  84:	80 61       	ori	r24, 0x10	; 16
  86:	8a bb       	out	0x1a, r24	; 26
	set_bit(DDRA , 5);
  88:	8a b3       	in	r24, 0x1a	; 26
  8a:	80 62       	ori	r24, 0x20	; 32
  8c:	8a bb       	out	0x1a, r24	; 26
	set_bit(DDRA , 6);
  8e:	8a b3       	in	r24, 0x1a	; 26
  90:	80 64       	ori	r24, 0x40	; 64
  92:	8a bb       	out	0x1a, r24	; 26
	set_bit(DDRB , 7);
  94:	87 b3       	in	r24, 0x17	; 23
  96:	80 68       	ori	r24, 0x80	; 128
  98:	87 bb       	out	0x17, r24	; 23
  9a:	08 95       	ret

0000009c <display_on_leds>:
	
}

void display_on_leds(unsigned char number){
	unsigned char counter = 0;
  9c:	90 e0       	ldi	r25, 0x00	; 0
	while(counter < 4){
  9e:	2f c0       	rjmp	.+94     	; 0xfe <display_on_leds+0x62>
		
		if(number & 1){
  a0:	80 ff       	sbrs	r24, 0
  a2:	16 c0       	rjmp	.+44     	; 0xd0 <display_on_leds+0x34>
			
			if(!counter)
  a4:	91 11       	cpse	r25, r1
  a6:	04 c0       	rjmp	.+8      	; 0xb0 <display_on_leds+0x14>
				set_bit(PORTB , 7);
  a8:	28 b3       	in	r18, 0x18	; 24
  aa:	20 68       	ori	r18, 0x80	; 128
  ac:	28 bb       	out	0x18, r18	; 24
  ae:	25 c0       	rjmp	.+74     	; 0xfa <display_on_leds+0x5e>
			else if (counter == 1)
  b0:	91 30       	cpi	r25, 0x01	; 1
  b2:	21 f4       	brne	.+8      	; 0xbc <display_on_leds+0x20>
				set_bit(PORTA , 6);
  b4:	2b b3       	in	r18, 0x1b	; 27
  b6:	20 64       	ori	r18, 0x40	; 64
  b8:	2b bb       	out	0x1b, r18	; 27
  ba:	1f c0       	rjmp	.+62     	; 0xfa <display_on_leds+0x5e>
			else if (counter == 2)
  bc:	92 30       	cpi	r25, 0x02	; 2
  be:	21 f4       	brne	.+8      	; 0xc8 <display_on_leds+0x2c>
				set_bit(PORTA , 5);
  c0:	2b b3       	in	r18, 0x1b	; 27
  c2:	20 62       	ori	r18, 0x20	; 32
  c4:	2b bb       	out	0x1b, r18	; 27
  c6:	19 c0       	rjmp	.+50     	; 0xfa <display_on_leds+0x5e>
			else 
				set_bit(PORTA , 4);
  c8:	2b b3       	in	r18, 0x1b	; 27
  ca:	20 61       	ori	r18, 0x10	; 16
  cc:	2b bb       	out	0x1b, r18	; 27
  ce:	15 c0       	rjmp	.+42     	; 0xfa <display_on_leds+0x5e>
				
		}
		
		else{
			
			if(!counter)
  d0:	91 11       	cpse	r25, r1
  d2:	04 c0       	rjmp	.+8      	; 0xdc <display_on_leds+0x40>
				clr_bit(PORTB , 7);
  d4:	28 b3       	in	r18, 0x18	; 24
  d6:	2f 77       	andi	r18, 0x7F	; 127
  d8:	28 bb       	out	0x18, r18	; 24
  da:	0f c0       	rjmp	.+30     	; 0xfa <display_on_leds+0x5e>
			else if (counter == 1)
  dc:	91 30       	cpi	r25, 0x01	; 1
  de:	21 f4       	brne	.+8      	; 0xe8 <display_on_leds+0x4c>
				clr_bit(PORTA , 6);
  e0:	2b b3       	in	r18, 0x1b	; 27
  e2:	2f 7b       	andi	r18, 0xBF	; 191
  e4:	2b bb       	out	0x1b, r18	; 27
  e6:	09 c0       	rjmp	.+18     	; 0xfa <display_on_leds+0x5e>
			else if (counter == 2)
  e8:	92 30       	cpi	r25, 0x02	; 2
  ea:	21 f4       	brne	.+8      	; 0xf4 <display_on_leds+0x58>
				clr_bit(PORTA , 5);
  ec:	2b b3       	in	r18, 0x1b	; 27
  ee:	2f 7d       	andi	r18, 0xDF	; 223
  f0:	2b bb       	out	0x1b, r18	; 27
  f2:	03 c0       	rjmp	.+6      	; 0xfa <display_on_leds+0x5e>
			else
				clr_bit(PORTA , 4);
  f4:	2b b3       	in	r18, 0x1b	; 27
  f6:	2f 7e       	andi	r18, 0xEF	; 239
  f8:	2b bb       	out	0x1b, r18	; 27
				
		}
		counter++;
  fa:	9f 5f       	subi	r25, 0xFF	; 255
		number>>=1;
  fc:	86 95       	lsr	r24
	
}

void display_on_leds(unsigned char number){
	unsigned char counter = 0;
	while(counter < 4){
  fe:	94 30       	cpi	r25, 0x04	; 4
 100:	78 f2       	brcs	.-98     	; 0xa0 <display_on_leds+0x4>
				
		}
		counter++;
		number>>=1;
	}
 102:	08 95       	ret

00000104 <keypad_init>:
// -------------- Initialize Keypad --------------

void keypad_init(void){
	
	// rows output
	set_bit(DDRC , 2); 
 104:	84 b3       	in	r24, 0x14	; 20
 106:	84 60       	ori	r24, 0x04	; 4
 108:	84 bb       	out	0x14, r24	; 20
	set_bit(DDRC , 3);
 10a:	84 b3       	in	r24, 0x14	; 20
 10c:	88 60       	ori	r24, 0x08	; 8
 10e:	84 bb       	out	0x14, r24	; 20
	set_bit(DDRC , 4);
 110:	84 b3       	in	r24, 0x14	; 20
 112:	80 61       	ori	r24, 0x10	; 16
 114:	84 bb       	out	0x14, r24	; 20
	set_bit(DDRC , 5);
 116:	84 b3       	in	r24, 0x14	; 20
 118:	80 62       	ori	r24, 0x20	; 32
 11a:	84 bb       	out	0x14, r24	; 20
	
	// column input
	clr_bit(DDRD , 7);
 11c:	81 b3       	in	r24, 0x11	; 17
 11e:	8f 77       	andi	r24, 0x7F	; 127
 120:	81 bb       	out	0x11, r24	; 17
	clr_bit(DDRD , 6);
 122:	81 b3       	in	r24, 0x11	; 17
 124:	8f 7b       	andi	r24, 0xBF	; 191
 126:	81 bb       	out	0x11, r24	; 17
	clr_bit(DDRD , 5);
 128:	81 b3       	in	r24, 0x11	; 17
 12a:	8f 7d       	andi	r24, 0xDF	; 223
 12c:	81 bb       	out	0x11, r24	; 17
	clr_bit(DDRD , 3);
 12e:	81 b3       	in	r24, 0x11	; 17
 130:	87 7f       	andi	r24, 0xF7	; 247
 132:	81 bb       	out	0x11, r24	; 17
	
	// enable pull up
	set_bit(PORTD , 7);
 134:	82 b3       	in	r24, 0x12	; 18
 136:	80 68       	ori	r24, 0x80	; 128
 138:	82 bb       	out	0x12, r24	; 18
	set_bit(PORTD , 6);
 13a:	82 b3       	in	r24, 0x12	; 18
 13c:	80 64       	ori	r24, 0x40	; 64
 13e:	82 bb       	out	0x12, r24	; 18
	set_bit(PORTD , 5);
 140:	82 b3       	in	r24, 0x12	; 18
 142:	80 62       	ori	r24, 0x20	; 32
 144:	82 bb       	out	0x12, r24	; 18
	set_bit(PORTD , 3);
 146:	82 b3       	in	r24, 0x12	; 18
 148:	88 60       	ori	r24, 0x08	; 8
 14a:	82 bb       	out	0x12, r24	; 18
 14c:	08 95       	ret

0000014e <keypad_get_value>:

// -------------- Retrieve The input's Value --------------

unsigned char keypad_get_value(void){
	unsigned char ans=0xff;
	for (int row=5 ; row>=2 ; row--)
 14e:	65 e0       	ldi	r22, 0x05	; 5
 150:	70 e0       	ldi	r23, 0x00	; 0
}

// -------------- Retrieve The input's Value --------------

unsigned char keypad_get_value(void){
	unsigned char ans=0xff;
 152:	8f ef       	ldi	r24, 0xFF	; 255
	for (int row=5 ; row>=2 ; row--)
 154:	61 c0       	rjmp	.+194    	; 0x218 <keypad_get_value+0xca>
	{
		PORTC|=0b00111100;
 156:	95 b3       	in	r25, 0x15	; 21
 158:	9c 63       	ori	r25, 0x3C	; 60
 15a:	95 bb       	out	0x15, r25	; 21
		clr_bit(PORTC , row);
 15c:	95 b3       	in	r25, 0x15	; 21
 15e:	21 e0       	ldi	r18, 0x01	; 1
 160:	30 e0       	ldi	r19, 0x00	; 0
 162:	06 2e       	mov	r0, r22
 164:	02 c0       	rjmp	.+4      	; 0x16a <keypad_get_value+0x1c>
 166:	22 0f       	add	r18, r18
 168:	33 1f       	adc	r19, r19
 16a:	0a 94       	dec	r0
 16c:	e2 f7       	brpl	.-8      	; 0x166 <keypad_get_value+0x18>
 16e:	20 95       	com	r18
 170:	29 23       	and	r18, r25
 172:	25 bb       	out	0x15, r18	; 21
		for (int col=7 ; col>=3 ; col--)
 174:	27 e0       	ldi	r18, 0x07	; 7
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	49 c0       	rjmp	.+146    	; 0x20c <keypad_get_value+0xbe>
		{
			if (col==4)
 17a:	24 30       	cpi	r18, 0x04	; 4
 17c:	31 05       	cpc	r19, r1
 17e:	11 f4       	brne	.+4      	; 0x184 <keypad_get_value+0x36>
				col--;
 180:	21 50       	subi	r18, 0x01	; 1
 182:	31 09       	sbc	r19, r1
			if (!get_bit(PIND , col))
 184:	40 b3       	in	r20, 0x10	; 16
 186:	50 e0       	ldi	r21, 0x00	; 0
 188:	02 2e       	mov	r0, r18
 18a:	02 c0       	rjmp	.+4      	; 0x190 <keypad_get_value+0x42>
 18c:	55 95       	asr	r21
 18e:	47 95       	ror	r20
 190:	0a 94       	dec	r0
 192:	e2 f7       	brpl	.-8      	; 0x18c <keypad_get_value+0x3e>
 194:	40 fd       	sbrc	r20, 0
 196:	38 c0       	rjmp	.+112    	; 0x208 <keypad_get_value+0xba>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 198:	e3 ec       	ldi	r30, 0xC3	; 195
 19a:	f9 e0       	ldi	r31, 0x09	; 9
 19c:	31 97       	sbiw	r30, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <keypad_get_value+0x4e>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <keypad_get_value+0x54>
 1a2:	00 00       	nop
			{
				_delay_ms(10);
				if (!get_bit(PIND , col))
 1a4:	40 b3       	in	r20, 0x10	; 16
 1a6:	50 e0       	ldi	r21, 0x00	; 0
 1a8:	02 2e       	mov	r0, r18
 1aa:	02 c0       	rjmp	.+4      	; 0x1b0 <keypad_get_value+0x62>
 1ac:	55 95       	asr	r21
 1ae:	47 95       	ror	r20
 1b0:	0a 94       	dec	r0
 1b2:	e2 f7       	brpl	.-8      	; 0x1ac <keypad_get_value+0x5e>
 1b4:	40 fd       	sbrc	r20, 0
 1b6:	28 c0       	rjmp	.+80     	; 0x208 <keypad_get_value+0xba>
				{
					if (col==3)
 1b8:	23 30       	cpi	r18, 0x03	; 3
 1ba:	31 05       	cpc	r19, r1
 1bc:	99 f4       	brne	.+38     	; 0x1e4 <keypad_get_value+0x96>
						ans=arr[5-row][7-col-1];
 1be:	85 e0       	ldi	r24, 0x05	; 5
 1c0:	90 e0       	ldi	r25, 0x00	; 0
 1c2:	86 1b       	sub	r24, r22
 1c4:	97 0b       	sbc	r25, r23
 1c6:	46 e0       	ldi	r20, 0x06	; 6
 1c8:	50 e0       	ldi	r21, 0x00	; 0
 1ca:	42 1b       	sub	r20, r18
 1cc:	53 0b       	sbc	r21, r19
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	88 0f       	add	r24, r24
 1d4:	99 1f       	adc	r25, r25
 1d6:	80 5a       	subi	r24, 0xA0	; 160
 1d8:	9f 4f       	sbci	r25, 0xFF	; 255
 1da:	fc 01       	movw	r30, r24
 1dc:	e4 0f       	add	r30, r20
 1de:	f5 1f       	adc	r31, r21
 1e0:	80 81       	ld	r24, Z
 1e2:	12 c0       	rjmp	.+36     	; 0x208 <keypad_get_value+0xba>
					else
						ans=arr[5-row][7-col];
 1e4:	85 e0       	ldi	r24, 0x05	; 5
 1e6:	90 e0       	ldi	r25, 0x00	; 0
 1e8:	86 1b       	sub	r24, r22
 1ea:	97 0b       	sbc	r25, r23
 1ec:	47 e0       	ldi	r20, 0x07	; 7
 1ee:	50 e0       	ldi	r21, 0x00	; 0
 1f0:	42 1b       	sub	r20, r18
 1f2:	53 0b       	sbc	r21, r19
 1f4:	88 0f       	add	r24, r24
 1f6:	99 1f       	adc	r25, r25
 1f8:	88 0f       	add	r24, r24
 1fa:	99 1f       	adc	r25, r25
 1fc:	80 5a       	subi	r24, 0xA0	; 160
 1fe:	9f 4f       	sbci	r25, 0xFF	; 255
 200:	fc 01       	movw	r30, r24
 202:	e4 0f       	add	r30, r20
 204:	f5 1f       	adc	r31, r21
 206:	80 81       	ld	r24, Z
	unsigned char ans=0xff;
	for (int row=5 ; row>=2 ; row--)
	{
		PORTC|=0b00111100;
		clr_bit(PORTC , row);
		for (int col=7 ; col>=3 ; col--)
 208:	21 50       	subi	r18, 0x01	; 1
 20a:	31 09       	sbc	r19, r1
 20c:	23 30       	cpi	r18, 0x03	; 3
 20e:	31 05       	cpc	r19, r1
 210:	0c f0       	brlt	.+2      	; 0x214 <keypad_get_value+0xc6>
 212:	b3 cf       	rjmp	.-154    	; 0x17a <keypad_get_value+0x2c>

// -------------- Retrieve The input's Value --------------

unsigned char keypad_get_value(void){
	unsigned char ans=0xff;
	for (int row=5 ; row>=2 ; row--)
 214:	61 50       	subi	r22, 0x01	; 1
 216:	71 09       	sbc	r23, r1
 218:	62 30       	cpi	r22, 0x02	; 2
 21a:	71 05       	cpc	r23, r1
 21c:	0c f0       	brlt	.+2      	; 0x220 <keypad_get_value+0xd2>
 21e:	9b cf       	rjmp	.-202    	; 0x156 <keypad_get_value+0x8>
				}
			}	
		}
	}
	// Make sure that the user can't enter any characters but numbers , = and +
	if((ans != '=') && (ans != '+') && ((ans>'9') || (ans<'0'))) 
 220:	8d 33       	cpi	r24, 0x3D	; 61
 222:	39 f0       	breq	.+14     	; 0x232 <keypad_get_value+0xe4>
 224:	8b 32       	cpi	r24, 0x2B	; 43
 226:	29 f0       	breq	.+10     	; 0x232 <keypad_get_value+0xe4>
 228:	90 ed       	ldi	r25, 0xD0	; 208
 22a:	98 0f       	add	r25, r24
 22c:	9a 30       	cpi	r25, 0x0A	; 10
 22e:	08 f0       	brcs	.+2      	; 0x232 <keypad_get_value+0xe4>
		return 0xff;
 230:	8f ef       	ldi	r24, 0xFF	; 255
	return ans;
 232:	08 95       	ret

00000234 <RS_data>:
}

// -------------- Set Rs to receive data --------------

void RS_data(){
	set_bit(PORTA,3);
 234:	8b b3       	in	r24, 0x1b	; 27
 236:	88 60       	ori	r24, 0x08	; 8
 238:	8b bb       	out	0x1b, r24	; 27
 23a:	08 95       	ret

0000023c <RS_command>:
}

// -------------- Set Rs to receive a command --------------

void RS_command(){
	clr_bit(PORTA,3);
 23c:	8b b3       	in	r24, 0x1b	; 27
 23e:	87 7f       	andi	r24, 0xF7	; 247
 240:	8b bb       	out	0x1b, r24	; 27
 242:	08 95       	ret

00000244 <latch>:

// -------------- Enable the latch and Save the digits to the PORT --------------

void latch(unsigned char digits){
	
	unsigned char temp = ((digits&0b00001000)<<1) | (digits&0b00000111);
 244:	98 2f       	mov	r25, r24
 246:	98 70       	andi	r25, 0x08	; 8
 248:	29 2f       	mov	r18, r25
 24a:	30 e0       	ldi	r19, 0x00	; 0
 24c:	22 0f       	add	r18, r18
 24e:	33 1f       	adc	r19, r19
 250:	87 70       	andi	r24, 0x07	; 7
 252:	28 2b       	or	r18, r24
	
	PORTB |= temp;
 254:	88 b3       	in	r24, 0x18	; 24
 256:	28 2b       	or	r18, r24
 258:	28 bb       	out	0x18, r18	; 24
	
	// Enable the E register and latch
	
	set_bit(PORTA,2);
 25a:	8b b3       	in	r24, 0x1b	; 27
 25c:	84 60       	ori	r24, 0x04	; 4
 25e:	8b bb       	out	0x1b, r24	; 27
 260:	8f e9       	ldi	r24, 0x9F	; 159
 262:	9f e0       	ldi	r25, 0x0F	; 15
 264:	01 97       	sbiw	r24, 0x01	; 1
 266:	f1 f7       	brne	.-4      	; 0x264 <latch+0x20>
 268:	00 c0       	rjmp	.+0      	; 0x26a <latch+0x26>
 26a:	00 00       	nop
	_delay_ms(1);
	clr_bit(PORTA,2);
 26c:	8b b3       	in	r24, 0x1b	; 27
 26e:	8b 7f       	andi	r24, 0xFB	; 251
 270:	8b bb       	out	0x1b, r24	; 27
 272:	08 95       	ret

00000274 <LCD_command>:
	LCD_command(0x80); // Force the cursor to the beginning of the 1st line
}

// -------------- Write a command to the LCD --------------

void LCD_command(unsigned char cmd){
 274:	cf 93       	push	r28
 276:	c8 2f       	mov	r28, r24
	RS_command(); // Rs is receiving a command not a data
 278:	0e 94 1e 01 	call	0x23c	; 0x23c <RS_command>
	
	// Send the high bits of the cmd to LCD
	PORTB &= 0b11101000;
 27c:	88 b3       	in	r24, 0x18	; 24
 27e:	88 7e       	andi	r24, 0xE8	; 232
 280:	88 bb       	out	0x18, r24	; 24
	
	unsigned char high = ((cmd&0xf0)>>4);
	
	latch(high);
 282:	8c 2f       	mov	r24, r28
 284:	82 95       	swap	r24
 286:	8f 70       	andi	r24, 0x0F	; 15
 288:	0e 94 22 01 	call	0x244	; 0x244 <latch>
	
	// Send the low bits of the cmd to LCD
	PORTB &= 0b11101000;
 28c:	88 b3       	in	r24, 0x18	; 24
 28e:	88 7e       	andi	r24, 0xE8	; 232
 290:	88 bb       	out	0x18, r24	; 24
	
	unsigned char low = (cmd&0x0f);
	
	latch(low);
 292:	8c 2f       	mov	r24, r28
 294:	8f 70       	andi	r24, 0x0F	; 15
 296:	0e 94 22 01 	call	0x244	; 0x244 <latch>
 29a:	8f e1       	ldi	r24, 0x1F	; 31
 29c:	9e e4       	ldi	r25, 0x4E	; 78
 29e:	01 97       	sbiw	r24, 0x01	; 1
 2a0:	f1 f7       	brne	.-4      	; 0x29e <LCD_command+0x2a>
 2a2:	00 c0       	rjmp	.+0      	; 0x2a4 <LCD_command+0x30>
 2a4:	00 00       	nop
	
	_delay_ms(5);

}
 2a6:	cf 91       	pop	r28
 2a8:	08 95       	ret

000002aa <LCD_init>:
#include "LCD.h"

// -------------- Initialize LCD -------------- 

void LCD_init(void){
	set_bit(DDRA,3);
 2aa:	8a b3       	in	r24, 0x1a	; 26
 2ac:	88 60       	ori	r24, 0x08	; 8
 2ae:	8a bb       	out	0x1a, r24	; 26
	set_bit(DDRA,2);
 2b0:	8a b3       	in	r24, 0x1a	; 26
 2b2:	84 60       	ori	r24, 0x04	; 4
 2b4:	8a bb       	out	0x1a, r24	; 26
	
	set_bit(DDRB,0);
 2b6:	87 b3       	in	r24, 0x17	; 23
 2b8:	81 60       	ori	r24, 0x01	; 1
 2ba:	87 bb       	out	0x17, r24	; 23
	set_bit(DDRB,1);
 2bc:	87 b3       	in	r24, 0x17	; 23
 2be:	82 60       	ori	r24, 0x02	; 2
 2c0:	87 bb       	out	0x17, r24	; 23
	set_bit(DDRB,2);
 2c2:	87 b3       	in	r24, 0x17	; 23
 2c4:	84 60       	ori	r24, 0x04	; 4
 2c6:	87 bb       	out	0x17, r24	; 23
	set_bit(DDRB,4);
 2c8:	87 b3       	in	r24, 0x17	; 23
 2ca:	80 61       	ori	r24, 0x10	; 16
 2cc:	87 bb       	out	0x17, r24	; 23
 2ce:	8f e5       	ldi	r24, 0x5F	; 95
 2d0:	9a ee       	ldi	r25, 0xEA	; 234
 2d2:	01 97       	sbiw	r24, 0x01	; 1
 2d4:	f1 f7       	brne	.-4      	; 0x2d2 <LCD_init+0x28>
 2d6:	00 c0       	rjmp	.+0      	; 0x2d8 <LCD_init+0x2e>
 2d8:	00 00       	nop
	
	_delay_ms(15); // You have to make this delay to make sure the LCD is on
	
	LCD_command(0x02); // to set the LCD
 2da:	82 e0       	ldi	r24, 0x02	; 2
 2dc:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_command>
	LCD_command(0x28); // as a 4 bit mode
 2e0:	88 e2       	ldi	r24, 0x28	; 40
 2e2:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_command>
	
	LCD_command(0x0e); // Display on, Cursor blinking
 2e6:	8e e0       	ldi	r24, 0x0E	; 14
 2e8:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_command>
	LCD_command(0x01); // Clear the display screen
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_command>
	LCD_command(0x80); // Force the cursor to the beginning of the 1st line
 2f2:	80 e8       	ldi	r24, 0x80	; 128
 2f4:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_command>
 2f8:	08 95       	ret

000002fa <LCD_write_char>:

}

// -------------- Write a character to the LCD --------------

void LCD_write_char(unsigned char ch){
 2fa:	cf 93       	push	r28
 2fc:	c8 2f       	mov	r28, r24
	RS_data(); // Rs is receiving a data not a command
 2fe:	0e 94 1a 01 	call	0x234	; 0x234 <RS_data>
	
	// Send the high bits of the data to LCD
	
	PORTB &= 0b11101000;
 302:	88 b3       	in	r24, 0x18	; 24
 304:	88 7e       	andi	r24, 0xE8	; 232
 306:	88 bb       	out	0x18, r24	; 24
	
	unsigned char high = ((ch&0xf0)>>4);
	latch(high);
 308:	8c 2f       	mov	r24, r28
 30a:	82 95       	swap	r24
 30c:	8f 70       	andi	r24, 0x0F	; 15
 30e:	0e 94 22 01 	call	0x244	; 0x244 <latch>
	
	// Send the low bits of the data to LCD
	
	PORTB &= 0b11101000;
 312:	88 b3       	in	r24, 0x18	; 24
 314:	88 7e       	andi	r24, 0xE8	; 232
 316:	88 bb       	out	0x18, r24	; 24
	
	unsigned char low = (ch&0x0f);
	latch(low);
 318:	8c 2f       	mov	r24, r28
 31a:	8f 70       	andi	r24, 0x0F	; 15
 31c:	0e 94 22 01 	call	0x244	; 0x244 <latch>
 320:	8f e1       	ldi	r24, 0x1F	; 31
 322:	9e e4       	ldi	r25, 0x4E	; 78
 324:	01 97       	sbiw	r24, 0x01	; 1
 326:	f1 f7       	brne	.-4      	; 0x324 <LCD_write_char+0x2a>
 328:	00 c0       	rjmp	.+0      	; 0x32a <LCD_write_char+0x30>
 32a:	00 00       	nop
	_delay_ms(5);
}
 32c:	cf 91       	pop	r28
 32e:	08 95       	ret

00000330 <LCD_string>:
	clr_bit(PORTA,2);
}

// -------------- Send a Full string to the LCD --------------

LCD_string(unsigned char* str){
 330:	0f 93       	push	r16
 332:	1f 93       	push	r17
 334:	cf 93       	push	r28
 336:	df 93       	push	r29
 338:	8c 01       	movw	r16, r24
	for (int i=0 ; str[i]!='\0' ; i++)
 33a:	c0 e0       	ldi	r28, 0x00	; 0
 33c:	d0 e0       	ldi	r29, 0x00	; 0
 33e:	03 c0       	rjmp	.+6      	; 0x346 <LCD_string+0x16>
	{
		LCD_write_char(str[i]);
 340:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_write_char>
}

// -------------- Send a Full string to the LCD --------------

LCD_string(unsigned char* str){
	for (int i=0 ; str[i]!='\0' ; i++)
 344:	21 96       	adiw	r28, 0x01	; 1
 346:	f8 01       	movw	r30, r16
 348:	ec 0f       	add	r30, r28
 34a:	fd 1f       	adc	r31, r29
 34c:	80 81       	ld	r24, Z
 34e:	81 11       	cpse	r24, r1
 350:	f7 cf       	rjmp	.-18     	; 0x340 <LCD_string+0x10>
	{
		LCD_write_char(str[i]);
	}
}
 352:	df 91       	pop	r29
 354:	cf 91       	pop	r28
 356:	1f 91       	pop	r17
 358:	0f 91       	pop	r16
 35a:	08 95       	ret

0000035c <LCD_clear>:

// -------------- to Clear the LCD --------------

LCD_clear(){
	LCD_command(0x01);
 35c:	81 e0       	ldi	r24, 0x01	; 1
 35e:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_command>
 362:	08 95       	ret

00000364 <main>:
#include "keypad.h"
#include "Seven_Segment.h"
#include "LCD.h"
#include "LEDs.h"

int main(void){
 364:	cf 92       	push	r12
 366:	df 92       	push	r13
 368:	ef 92       	push	r14
 36a:	ff 92       	push	r15
 36c:	0f 93       	push	r16
 36e:	1f 93       	push	r17
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	cd b7       	in	r28, 0x3d	; 61
 376:	de b7       	in	r29, 0x3e	; 62
 378:	e0 97       	sbiw	r28, 0x30	; 48
 37a:	0f b6       	in	r0, 0x3f	; 63
 37c:	f8 94       	cli
 37e:	de bf       	out	0x3e, r29	; 62
 380:	0f be       	out	0x3f, r0	; 63
 382:	cd bf       	out	0x3d, r28	; 61
	
	keypad_init();
 384:	0e 94 82 00 	call	0x104	; 0x104 <keypad_init>
	LCD_init();
 388:	0e 94 55 01 	call	0x2aa	; 0x2aa <LCD_init>
	int array[16] = {0};
 38c:	fe 01       	movw	r30, r28
 38e:	31 96       	adiw	r30, 0x01	; 1
 390:	80 e2       	ldi	r24, 0x20	; 32
 392:	df 01       	movw	r26, r30
 394:	1d 92       	st	X+, r1
 396:	8a 95       	dec	r24
 398:	e9 f7       	brne	.-6      	; 0x394 <main+0x30>
	unsigned char targets[16] = {-1};
 39a:	b0 96       	adiw	r30, 0x20	; 32
 39c:	80 e1       	ldi	r24, 0x10	; 16
 39e:	df 01       	movw	r26, r30
 3a0:	1d 92       	st	X+, r1
 3a2:	8a 95       	dec	r24
 3a4:	e9 f7       	brne	.-6      	; 0x3a0 <main+0x3c>
 3a6:	8f ef       	ldi	r24, 0xFF	; 255
 3a8:	89 a3       	std	Y+33, r24	; 0x21
	int target = 0;
	unsigned char counter = 0 , counter2 = 0;
	bool flag = false;
 3aa:	f1 2c       	mov	r15, r1
	keypad_init();
	LCD_init();
	int array[16] = {0};
	unsigned char targets[16] = {-1};
	int target = 0;
	unsigned char counter = 0 , counter2 = 0;
 3ac:	e1 2c       	mov	r14, r1
	
	keypad_init();
	LCD_init();
	int array[16] = {0};
	unsigned char targets[16] = {-1};
	int target = 0;
 3ae:	c1 2c       	mov	r12, r1
 3b0:	d1 2c       	mov	r13, r1
	unsigned char counter = 0 , counter2 = 0;
	bool flag = false;
    while (1) {
		
		unsigned char value = keypad_get_value();
 3b2:	0e 94 a7 00 	call	0x14e	; 0x14e <keypad_get_value>
 3b6:	18 2f       	mov	r17, r24
		if(flag){
 3b8:	ff 20       	and	r15, r15
 3ba:	a1 f1       	breq	.+104    	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
			
			// if any number is pressed then update the target value
			
			if ((value != 0xff) && (value != '=') && (value != '+')){
 3bc:	8f 3f       	cpi	r24, 0xFF	; 255
 3be:	09 f1       	breq	.+66     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3c0:	8d 33       	cpi	r24, 0x3D	; 61
 3c2:	f9 f0       	breq	.+62     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
 3c4:	8b 32       	cpi	r24, 0x2B	; 43
 3c6:	e9 f0       	breq	.+58     	; 0x402 <__EEPROM_REGION_LENGTH__+0x2>
				
				LCD_write_char(value);
 3c8:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_write_char>
 3cc:	bf ef       	ldi	r27, 0xFF	; 255
 3ce:	27 e8       	ldi	r18, 0x87	; 135
 3d0:	33 e1       	ldi	r19, 0x13	; 19
 3d2:	b1 50       	subi	r27, 0x01	; 1
 3d4:	20 40       	sbci	r18, 0x00	; 0
 3d6:	30 40       	sbci	r19, 0x00	; 0
 3d8:	e1 f7       	brne	.-8      	; 0x3d2 <main+0x6e>
 3da:	00 c0       	rjmp	.+0      	; 0x3dc <main+0x78>
 3dc:	00 00       	nop
				_delay_ms(400);
				target+=value-'0';
 3de:	81 2f       	mov	r24, r17
 3e0:	90 e0       	ldi	r25, 0x00	; 0
 3e2:	c0 97       	sbiw	r24, 0x30	; 48
 3e4:	8c 0d       	add	r24, r12
 3e6:	9d 1d       	adc	r25, r13
				target*=10;
 3e8:	8c 01       	movw	r16, r24
 3ea:	00 0f       	add	r16, r16
 3ec:	11 1f       	adc	r17, r17
 3ee:	88 0f       	add	r24, r24
 3f0:	99 1f       	adc	r25, r25
 3f2:	88 0f       	add	r24, r24
 3f4:	99 1f       	adc	r25, r25
 3f6:	88 0f       	add	r24, r24
 3f8:	99 1f       	adc	r25, r25
 3fa:	68 01       	movw	r12, r16
 3fc:	c8 0e       	add	r12, r24
 3fe:	d9 1e       	adc	r13, r25
 400:	d8 cf       	rjmp	.-80     	; 0x3b2 <main+0x4e>
				
			}
			
			// if = is pressed then end the LCD process and start searching
			
			else if (value == '='){
 402:	1d 33       	cpi	r17, 0x3D	; 61
 404:	b1 f6       	brne	.-84     	; 0x3b2 <main+0x4e>
				
				LCD_clear();
 406:	0e 94 ae 01 	call	0x35c	; 0x35c <LCD_clear>
 40a:	8f ef       	ldi	r24, 0xFF	; 255
 40c:	97 e8       	ldi	r25, 0x87	; 135
 40e:	a3 e1       	ldi	r26, 0x13	; 19
 410:	81 50       	subi	r24, 0x01	; 1
 412:	90 40       	sbci	r25, 0x00	; 0
 414:	a0 40       	sbci	r26, 0x00	; 0
 416:	e1 f7       	brne	.-8      	; 0x410 <__EEPROM_REGION_LENGTH__+0x10>
 418:	00 c0       	rjmp	.+0      	; 0x41a <__EEPROM_REGION_LENGTH__+0x1a>
 41a:	00 00       	nop
		}		
    }
	
	// Search for the target and add the positions to targets
	
	for (int i=0 ; i<counter ; i++){
 41c:	80 e0       	ldi	r24, 0x00	; 0
 41e:	90 e0       	ldi	r25, 0x00	; 0
	keypad_init();
	LCD_init();
	int array[16] = {0};
	unsigned char targets[16] = {-1};
	int target = 0;
	unsigned char counter = 0 , counter2 = 0;
 420:	f1 2c       	mov	r15, r1
		}		
    }
	
	// Search for the target and add the positions to targets
	
	for (int i=0 ; i<counter ; i++){
 422:	69 c0       	rjmp	.+210    	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
		
		else{
			
			// if any number is pressed then add it to the array
			
			if ((value != 0xff) && (value != '=') && (value != '+')){
 424:	8f 3f       	cpi	r24, 0xFF	; 255
 426:	71 f1       	breq	.+92     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 428:	8d 33       	cpi	r24, 0x3D	; 61
 42a:	61 f1       	breq	.+88     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
 42c:	8b 32       	cpi	r24, 0x2B	; 43
 42e:	51 f1       	breq	.+84     	; 0x484 <__EEPROM_REGION_LENGTH__+0x84>
				
				LCD_write_char(value);
 430:	0e 94 7d 01 	call	0x2fa	; 0x2fa <LCD_write_char>
 434:	bf ef       	ldi	r27, 0xFF	; 255
 436:	27 e8       	ldi	r18, 0x87	; 135
 438:	33 e1       	ldi	r19, 0x13	; 19
 43a:	b1 50       	subi	r27, 0x01	; 1
 43c:	20 40       	sbci	r18, 0x00	; 0
 43e:	30 40       	sbci	r19, 0x00	; 0
 440:	e1 f7       	brne	.-8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 442:	00 c0       	rjmp	.+0      	; 0x444 <__EEPROM_REGION_LENGTH__+0x44>
 444:	00 00       	nop
				_delay_ms(400);
				array[counter]+=value-'0';
 446:	ee 2d       	mov	r30, r14
 448:	f0 e0       	ldi	r31, 0x00	; 0
 44a:	81 2f       	mov	r24, r17
 44c:	90 e0       	ldi	r25, 0x00	; 0
 44e:	c0 97       	sbiw	r24, 0x30	; 48
 450:	ee 0f       	add	r30, r30
 452:	ff 1f       	adc	r31, r31
 454:	a1 e0       	ldi	r26, 0x01	; 1
 456:	b0 e0       	ldi	r27, 0x00	; 0
 458:	ac 0f       	add	r26, r28
 45a:	bd 1f       	adc	r27, r29
 45c:	ea 0f       	add	r30, r26
 45e:	fb 1f       	adc	r31, r27
 460:	20 81       	ld	r18, Z
 462:	31 81       	ldd	r19, Z+1	; 0x01
 464:	82 0f       	add	r24, r18
 466:	93 1f       	adc	r25, r19
				array[counter]*=10;
 468:	9c 01       	movw	r18, r24
 46a:	22 0f       	add	r18, r18
 46c:	33 1f       	adc	r19, r19
 46e:	88 0f       	add	r24, r24
 470:	99 1f       	adc	r25, r25
 472:	88 0f       	add	r24, r24
 474:	99 1f       	adc	r25, r25
 476:	88 0f       	add	r24, r24
 478:	99 1f       	adc	r25, r25
 47a:	82 0f       	add	r24, r18
 47c:	93 1f       	adc	r25, r19
 47e:	91 83       	std	Z+1, r25	; 0x01
 480:	80 83       	st	Z, r24
 482:	97 cf       	rjmp	.-210    	; 0x3b2 <main+0x4e>
				
			}
			
			// if + is pressed then move to the next element to the array
			
			else if (value == '+'){
 484:	1b 32       	cpi	r17, 0x2B	; 43
 486:	71 f4       	brne	.+28     	; 0x4a4 <__EEPROM_REGION_LENGTH__+0xa4>
				
				LCD_command(0x14);
 488:	84 e1       	ldi	r24, 0x14	; 20
 48a:	0e 94 3a 01 	call	0x274	; 0x274 <LCD_command>
				counter++;
 48e:	e3 94       	inc	r14
 490:	bf ef       	ldi	r27, 0xFF	; 255
 492:	27 e8       	ldi	r18, 0x87	; 135
 494:	33 e1       	ldi	r19, 0x13	; 19
 496:	b1 50       	subi	r27, 0x01	; 1
 498:	20 40       	sbci	r18, 0x00	; 0
 49a:	30 40       	sbci	r19, 0x00	; 0
 49c:	e1 f7       	brne	.-8      	; 0x496 <__EEPROM_REGION_LENGTH__+0x96>
 49e:	00 c0       	rjmp	.+0      	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 4a0:	00 00       	nop
 4a2:	87 cf       	rjmp	.-242    	; 0x3b2 <main+0x4e>
				
			}
			
			// if = is pressed then stop entering numbers to the array
			
			else if (value == '=') {
 4a4:	1d 33       	cpi	r17, 0x3D	; 61
 4a6:	09 f0       	breq	.+2      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4a8:	84 cf       	rjmp	.-248    	; 0x3b2 <main+0x4e>
				
				LCD_clear();
 4aa:	0e 94 ae 01 	call	0x35c	; 0x35c <LCD_clear>
 4ae:	8f ef       	ldi	r24, 0xFF	; 255
 4b0:	97 e8       	ldi	r25, 0x87	; 135
 4b2:	a3 e1       	ldi	r26, 0x13	; 19
 4b4:	81 50       	subi	r24, 0x01	; 1
 4b6:	90 40       	sbci	r25, 0x00	; 0
 4b8:	a0 40       	sbci	r26, 0x00	; 0
 4ba:	e1 f7       	brne	.-8      	; 0x4b4 <__EEPROM_REGION_LENGTH__+0xb4>
 4bc:	00 c0       	rjmp	.+0      	; 0x4be <__EEPROM_REGION_LENGTH__+0xbe>
 4be:	00 00       	nop
				_delay_ms(400);
				counter++;
 4c0:	e3 94       	inc	r14
				flag = true;
 4c2:	ff 24       	eor	r15, r15
 4c4:	f3 94       	inc	r15
 4c6:	75 cf       	rjmp	.-278    	; 0x3b2 <main+0x4e>
    }
	
	// Search for the target and add the positions to targets
	
	for (int i=0 ; i<counter ; i++){
		if(target == array[i]){
 4c8:	fc 01       	movw	r30, r24
 4ca:	ee 0f       	add	r30, r30
 4cc:	ff 1f       	adc	r31, r31
 4ce:	21 e0       	ldi	r18, 0x01	; 1
 4d0:	30 e0       	ldi	r19, 0x00	; 0
 4d2:	2c 0f       	add	r18, r28
 4d4:	3d 1f       	adc	r19, r29
 4d6:	e2 0f       	add	r30, r18
 4d8:	f3 1f       	adc	r31, r19
 4da:	20 81       	ld	r18, Z
 4dc:	31 81       	ldd	r19, Z+1	; 0x01
 4de:	c2 16       	cp	r12, r18
 4e0:	d3 06       	cpc	r13, r19
 4e2:	41 f4       	brne	.+16     	; 0x4f4 <__EEPROM_REGION_LENGTH__+0xf4>
			
			targets[counter2]=i;
 4e4:	e1 e2       	ldi	r30, 0x21	; 33
 4e6:	f0 e0       	ldi	r31, 0x00	; 0
 4e8:	ec 0f       	add	r30, r28
 4ea:	fd 1f       	adc	r31, r29
 4ec:	ef 0d       	add	r30, r15
 4ee:	f1 1d       	adc	r31, r1
 4f0:	80 83       	st	Z, r24
			counter2++;
 4f2:	f3 94       	inc	r15
		}		
    }
	
	// Search for the target and add the positions to targets
	
	for (int i=0 ; i<counter ; i++){
 4f4:	01 96       	adiw	r24, 0x01	; 1
 4f6:	2e 2d       	mov	r18, r14
 4f8:	30 e0       	ldi	r19, 0x00	; 0
 4fa:	82 17       	cp	r24, r18
 4fc:	93 07       	cpc	r25, r19
 4fe:	24 f3       	brlt	.-56     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
		}
	}
	
	// if the target is not found then print in the LCD not Found
	
	if(counter2==0){
 500:	ff 20       	and	r15, r15
 502:	09 f1       	breq	.+66     	; 0x546 <__EEPROM_REGION_LENGTH__+0x146>
	}
	
	//if  the target is found then display the positions in Seven segment and Leds 
	
	else{
		seven_segment_init();
 504:	0e 94 b8 02 	call	0x570	; 0x570 <seven_segment_init>
		leds_init();
 508:	0e 94 41 00 	call	0x82	; 0x82 <leds_init>
		unsigned char i = 0;
 50c:	10 e0       	ldi	r17, 0x00	; 0
		while(1){
			display_on_seven_seg(targets[i%counter2]);
 50e:	81 2f       	mov	r24, r17
 510:	6f 2d       	mov	r22, r15
 512:	0e 94 c8 02 	call	0x590	; 0x590 <__udivmodqi4>
 516:	e1 e2       	ldi	r30, 0x21	; 33
 518:	f0 e0       	ldi	r31, 0x00	; 0
 51a:	ec 0f       	add	r30, r28
 51c:	fd 1f       	adc	r31, r29
 51e:	e9 0f       	add	r30, r25
 520:	f1 1d       	adc	r31, r1
 522:	00 81       	ld	r16, Z
 524:	80 2f       	mov	r24, r16
 526:	0e 94 bc 02 	call	0x578	; 0x578 <display_on_seven_seg>
			display_on_leds(targets[i%counter2]);
 52a:	80 2f       	mov	r24, r16
 52c:	0e 94 4e 00 	call	0x9c	; 0x9c <display_on_leds>
 530:	3f ef       	ldi	r19, 0xFF	; 255
 532:	83 ed       	ldi	r24, 0xD3	; 211
 534:	90 e3       	ldi	r25, 0x30	; 48
 536:	31 50       	subi	r19, 0x01	; 1
 538:	80 40       	sbci	r24, 0x00	; 0
 53a:	90 40       	sbci	r25, 0x00	; 0
 53c:	e1 f7       	brne	.-8      	; 0x536 <__EEPROM_REGION_LENGTH__+0x136>
 53e:	00 c0       	rjmp	.+0      	; 0x540 <__EEPROM_REGION_LENGTH__+0x140>
 540:	00 00       	nop
			_delay_ms(1000);
			i++;
 542:	1f 5f       	subi	r17, 0xFF	; 255
 544:	e4 cf       	rjmp	.-56     	; 0x50e <__EEPROM_REGION_LENGTH__+0x10e>
	}
	
	// if the target is not found then print in the LCD not Found
	
	if(counter2==0){
		LCD_string("NOT FOUND");
 546:	80 e7       	ldi	r24, 0x70	; 112
 548:	90 e0       	ldi	r25, 0x00	; 0
 54a:	0e 94 98 01 	call	0x330	; 0x330 <LCD_string>
			i++;
		}
			
	}
	
}
 54e:	80 e0       	ldi	r24, 0x00	; 0
 550:	90 e0       	ldi	r25, 0x00	; 0
 552:	e0 96       	adiw	r28, 0x30	; 48
 554:	0f b6       	in	r0, 0x3f	; 63
 556:	f8 94       	cli
 558:	de bf       	out	0x3e, r29	; 62
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	cd bf       	out	0x3d, r28	; 61
 55e:	df 91       	pop	r29
 560:	cf 91       	pop	r28
 562:	1f 91       	pop	r17
 564:	0f 91       	pop	r16
 566:	ff 90       	pop	r15
 568:	ef 90       	pop	r14
 56a:	df 90       	pop	r13
 56c:	cf 90       	pop	r12
 56e:	08 95       	ret

00000570 <seven_segment_init>:
#include "Seven_Segment.h"

// -------------- Initialize 7 Segment --------------

void seven_segment_init(){
	DDRB |= 0b00010111;
 570:	87 b3       	in	r24, 0x17	; 23
 572:	87 61       	ori	r24, 0x17	; 23
 574:	87 bb       	out	0x17, r24	; 23
 576:	08 95       	ret

00000578 <display_on_seven_seg>:
}

// -------------- Display on 7 Segment --------------

void display_on_seven_seg(unsigned char num){
	if(num<8)
 578:	88 30       	cpi	r24, 0x08	; 8
 57a:	10 f4       	brcc	.+4      	; 0x580 <display_on_seven_seg+0x8>
		PORTB = num;
 57c:	88 bb       	out	0x18, r24	; 24
 57e:	08 95       	ret
	else if (num==8)
 580:	88 30       	cpi	r24, 0x08	; 8
 582:	19 f4       	brne	.+6      	; 0x58a <display_on_seven_seg+0x12>
		PORTB = 0b00010000;
 584:	80 e1       	ldi	r24, 0x10	; 16
 586:	88 bb       	out	0x18, r24	; 24
 588:	08 95       	ret
	else
		PORTB = 0b00010001;
 58a:	81 e1       	ldi	r24, 0x11	; 17
 58c:	88 bb       	out	0x18, r24	; 24
 58e:	08 95       	ret

00000590 <__udivmodqi4>:
 590:	99 1b       	sub	r25, r25
 592:	79 e0       	ldi	r23, 0x09	; 9
 594:	04 c0       	rjmp	.+8      	; 0x59e <__udivmodqi4_ep>

00000596 <__udivmodqi4_loop>:
 596:	99 1f       	adc	r25, r25
 598:	96 17       	cp	r25, r22
 59a:	08 f0       	brcs	.+2      	; 0x59e <__udivmodqi4_ep>
 59c:	96 1b       	sub	r25, r22

0000059e <__udivmodqi4_ep>:
 59e:	88 1f       	adc	r24, r24
 5a0:	7a 95       	dec	r23
 5a2:	c9 f7       	brne	.-14     	; 0x596 <__udivmodqi4_loop>
 5a4:	80 95       	com	r24
 5a6:	08 95       	ret

000005a8 <_exit>:
 5a8:	f8 94       	cli

000005aa <__stop_program>:
 5aa:	ff cf       	rjmp	.-2      	; 0x5aa <__stop_program>
