
Assignment 2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000026c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000024  00800060  0000026c  000002e0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000304  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000334  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000058  00000000  00000000  00000370  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000007be  00000000  00000000  000003c8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000669  00000000  00000000  00000b86  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000352  00000000  00000000  000011ef  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000088  00000000  00000000  00001544  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000369  00000000  00000000  000015cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000144  00000000  00000000  00001935  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  00001a79  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e6       	ldi	r30, 0x6C	; 108
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 38       	cpi	r26, 0x84	; 132
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 ff 00 	call	0x1fe	; 0x1fe <main>
  7a:	0c 94 34 01 	jmp	0x268	; 0x268 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <keypad_init>:
	{'1','2','3','-'},
	{'?','0','=','+'}
	};
void keypad_init(void){
	// rows output
	set_bit(DDRC , 2); 
  82:	84 b3       	in	r24, 0x14	; 20
  84:	84 60       	ori	r24, 0x04	; 4
  86:	84 bb       	out	0x14, r24	; 20
	set_bit(DDRC , 3);
  88:	84 b3       	in	r24, 0x14	; 20
  8a:	88 60       	ori	r24, 0x08	; 8
  8c:	84 bb       	out	0x14, r24	; 20
	set_bit(DDRC , 4);
  8e:	84 b3       	in	r24, 0x14	; 20
  90:	80 61       	ori	r24, 0x10	; 16
  92:	84 bb       	out	0x14, r24	; 20
	set_bit(DDRC , 5);
  94:	84 b3       	in	r24, 0x14	; 20
  96:	80 62       	ori	r24, 0x20	; 32
  98:	84 bb       	out	0x14, r24	; 20
	// column input
	clr_bit(DDRD , 7);
  9a:	81 b3       	in	r24, 0x11	; 17
  9c:	8f 77       	andi	r24, 0x7F	; 127
  9e:	81 bb       	out	0x11, r24	; 17
	clr_bit(DDRD , 6);
  a0:	81 b3       	in	r24, 0x11	; 17
  a2:	8f 7b       	andi	r24, 0xBF	; 191
  a4:	81 bb       	out	0x11, r24	; 17
	clr_bit(DDRD , 5);
  a6:	81 b3       	in	r24, 0x11	; 17
  a8:	8f 7d       	andi	r24, 0xDF	; 223
  aa:	81 bb       	out	0x11, r24	; 17
	clr_bit(DDRD , 3);
  ac:	81 b3       	in	r24, 0x11	; 17
  ae:	87 7f       	andi	r24, 0xF7	; 247
  b0:	81 bb       	out	0x11, r24	; 17
	// enable pull up
	set_bit(PORTD , 7);
  b2:	82 b3       	in	r24, 0x12	; 18
  b4:	80 68       	ori	r24, 0x80	; 128
  b6:	82 bb       	out	0x12, r24	; 18
	set_bit(PORTD , 6);
  b8:	82 b3       	in	r24, 0x12	; 18
  ba:	80 64       	ori	r24, 0x40	; 64
  bc:	82 bb       	out	0x12, r24	; 18
	set_bit(PORTD , 5);
  be:	82 b3       	in	r24, 0x12	; 18
  c0:	80 62       	ori	r24, 0x20	; 32
  c2:	82 bb       	out	0x12, r24	; 18
	set_bit(PORTD , 3);
  c4:	82 b3       	in	r24, 0x12	; 18
  c6:	88 60       	ori	r24, 0x08	; 8
  c8:	82 bb       	out	0x12, r24	; 18
  ca:	08 95       	ret

000000cc <seven_segment_init>:

}
void seven_segment_init(){
	DDRA |= 0b01111111;
  cc:	8a b3       	in	r24, 0x1a	; 26
  ce:	8f 67       	ori	r24, 0x7F	; 127
  d0:	8a bb       	out	0x1a, r24	; 26
  d2:	08 95       	ret

000000d4 <display_on_seven_seg>:
}
void display_on_seven_seg(int num){
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	cd b7       	in	r28, 0x3d	; 61
  da:	de b7       	in	r29, 0x3e	; 62
  dc:	64 97       	sbiw	r28, 0x14	; 20
  de:	0f b6       	in	r0, 0x3f	; 63
  e0:	f8 94       	cli
  e2:	de bf       	out	0x3e, r29	; 62
  e4:	0f be       	out	0x3f, r0	; 63
  e6:	cd bf       	out	0x3d, r28	; 61
	int arr[10]={
  e8:	24 e1       	ldi	r18, 0x14	; 20
  ea:	e0 e7       	ldi	r30, 0x70	; 112
  ec:	f0 e0       	ldi	r31, 0x00	; 0
  ee:	de 01       	movw	r26, r28
  f0:	11 96       	adiw	r26, 0x01	; 1
  f2:	01 90       	ld	r0, Z+
  f4:	0d 92       	st	X+, r0
  f6:	2a 95       	dec	r18
  f8:	e1 f7       	brne	.-8      	; 0xf2 <display_on_seven_seg+0x1e>
		 0b01111101,//6
		 0b00000111,//7
		 0b01111111,//8
		 0b01101111 //9
		 };
	PORTA=arr[num%10];
  fa:	6a e0       	ldi	r22, 0x0A	; 10
  fc:	70 e0       	ldi	r23, 0x00	; 0
  fe:	0e 94 0c 01 	call	0x218	; 0x218 <__divmodhi4>
 102:	fc 01       	movw	r30, r24
 104:	ee 0f       	add	r30, r30
 106:	ff 1f       	adc	r31, r31
 108:	81 e0       	ldi	r24, 0x01	; 1
 10a:	90 e0       	ldi	r25, 0x00	; 0
 10c:	8c 0f       	add	r24, r28
 10e:	9d 1f       	adc	r25, r29
 110:	e8 0f       	add	r30, r24
 112:	f9 1f       	adc	r31, r25
 114:	80 81       	ld	r24, Z
 116:	8b bb       	out	0x1b, r24	; 27
}
 118:	64 96       	adiw	r28, 0x14	; 20
 11a:	0f b6       	in	r0, 0x3f	; 63
 11c:	f8 94       	cli
 11e:	de bf       	out	0x3e, r29	; 62
 120:	0f be       	out	0x3f, r0	; 63
 122:	cd bf       	out	0x3d, r28	; 61
 124:	df 91       	pop	r29
 126:	cf 91       	pop	r28
 128:	08 95       	ret

0000012a <keypad_get_value>:
unsigned char keypad_get_value(void){
	unsigned char ans=0xff;
	for (int row=5 ; row>=2 ; row--)
 12a:	65 e0       	ldi	r22, 0x05	; 5
 12c:	70 e0       	ldi	r23, 0x00	; 0
		 0b01101111 //9
		 };
	PORTA=arr[num%10];
}
unsigned char keypad_get_value(void){
	unsigned char ans=0xff;
 12e:	8f ef       	ldi	r24, 0xFF	; 255
	for (int row=5 ; row>=2 ; row--)
 130:	61 c0       	rjmp	.+194    	; 0x1f4 <keypad_get_value+0xca>
	{
		PORTC|=0b00111100;
 132:	95 b3       	in	r25, 0x15	; 21
 134:	9c 63       	ori	r25, 0x3C	; 60
 136:	95 bb       	out	0x15, r25	; 21
		clr_bit(PORTC , row);
 138:	95 b3       	in	r25, 0x15	; 21
 13a:	21 e0       	ldi	r18, 0x01	; 1
 13c:	30 e0       	ldi	r19, 0x00	; 0
 13e:	06 2e       	mov	r0, r22
 140:	02 c0       	rjmp	.+4      	; 0x146 <keypad_get_value+0x1c>
 142:	22 0f       	add	r18, r18
 144:	33 1f       	adc	r19, r19
 146:	0a 94       	dec	r0
 148:	e2 f7       	brpl	.-8      	; 0x142 <keypad_get_value+0x18>
 14a:	20 95       	com	r18
 14c:	29 23       	and	r18, r25
 14e:	25 bb       	out	0x15, r18	; 21
		for (int col=7 ; col>=3 ; col--)
 150:	27 e0       	ldi	r18, 0x07	; 7
 152:	30 e0       	ldi	r19, 0x00	; 0
 154:	49 c0       	rjmp	.+146    	; 0x1e8 <keypad_get_value+0xbe>
		{
			if (col==4)
 156:	24 30       	cpi	r18, 0x04	; 4
 158:	31 05       	cpc	r19, r1
 15a:	11 f4       	brne	.+4      	; 0x160 <keypad_get_value+0x36>
				col--;
 15c:	21 50       	subi	r18, 0x01	; 1
 15e:	31 09       	sbc	r19, r1
			if (!get_bit(PIND , col))
 160:	40 b3       	in	r20, 0x10	; 16
 162:	50 e0       	ldi	r21, 0x00	; 0
 164:	02 2e       	mov	r0, r18
 166:	02 c0       	rjmp	.+4      	; 0x16c <keypad_get_value+0x42>
 168:	55 95       	asr	r21
 16a:	47 95       	ror	r20
 16c:	0a 94       	dec	r0
 16e:	e2 f7       	brpl	.-8      	; 0x168 <keypad_get_value+0x3e>
 170:	40 fd       	sbrc	r20, 0
 172:	38 c0       	rjmp	.+112    	; 0x1e4 <keypad_get_value+0xba>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 174:	e3 ec       	ldi	r30, 0xC3	; 195
 176:	f9 e0       	ldi	r31, 0x09	; 9
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <keypad_get_value+0x4e>
 17c:	00 c0       	rjmp	.+0      	; 0x17e <keypad_get_value+0x54>
 17e:	00 00       	nop
			{
				_delay_ms(10);
				if (!get_bit(PIND , col))
 180:	40 b3       	in	r20, 0x10	; 16
 182:	50 e0       	ldi	r21, 0x00	; 0
 184:	02 2e       	mov	r0, r18
 186:	02 c0       	rjmp	.+4      	; 0x18c <keypad_get_value+0x62>
 188:	55 95       	asr	r21
 18a:	47 95       	ror	r20
 18c:	0a 94       	dec	r0
 18e:	e2 f7       	brpl	.-8      	; 0x188 <keypad_get_value+0x5e>
 190:	40 fd       	sbrc	r20, 0
 192:	28 c0       	rjmp	.+80     	; 0x1e4 <keypad_get_value+0xba>
				{
					if (col==3)
 194:	23 30       	cpi	r18, 0x03	; 3
 196:	31 05       	cpc	r19, r1
 198:	99 f4       	brne	.+38     	; 0x1c0 <keypad_get_value+0x96>
						ans=arr[5-row][7-col-1];
 19a:	85 e0       	ldi	r24, 0x05	; 5
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	86 1b       	sub	r24, r22
 1a0:	97 0b       	sbc	r25, r23
 1a2:	46 e0       	ldi	r20, 0x06	; 6
 1a4:	50 e0       	ldi	r21, 0x00	; 0
 1a6:	42 1b       	sub	r20, r18
 1a8:	53 0b       	sbc	r21, r19
 1aa:	88 0f       	add	r24, r24
 1ac:	99 1f       	adc	r25, r25
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	80 5a       	subi	r24, 0xA0	; 160
 1b4:	9f 4f       	sbci	r25, 0xFF	; 255
 1b6:	fc 01       	movw	r30, r24
 1b8:	e4 0f       	add	r30, r20
 1ba:	f5 1f       	adc	r31, r21
 1bc:	80 81       	ld	r24, Z
 1be:	12 c0       	rjmp	.+36     	; 0x1e4 <keypad_get_value+0xba>
					else
						ans=arr[5-row][7-col];
 1c0:	85 e0       	ldi	r24, 0x05	; 5
 1c2:	90 e0       	ldi	r25, 0x00	; 0
 1c4:	86 1b       	sub	r24, r22
 1c6:	97 0b       	sbc	r25, r23
 1c8:	47 e0       	ldi	r20, 0x07	; 7
 1ca:	50 e0       	ldi	r21, 0x00	; 0
 1cc:	42 1b       	sub	r20, r18
 1ce:	53 0b       	sbc	r21, r19
 1d0:	88 0f       	add	r24, r24
 1d2:	99 1f       	adc	r25, r25
 1d4:	88 0f       	add	r24, r24
 1d6:	99 1f       	adc	r25, r25
 1d8:	80 5a       	subi	r24, 0xA0	; 160
 1da:	9f 4f       	sbci	r25, 0xFF	; 255
 1dc:	fc 01       	movw	r30, r24
 1de:	e4 0f       	add	r30, r20
 1e0:	f5 1f       	adc	r31, r21
 1e2:	80 81       	ld	r24, Z
	unsigned char ans=0xff;
	for (int row=5 ; row>=2 ; row--)
	{
		PORTC|=0b00111100;
		clr_bit(PORTC , row);
		for (int col=7 ; col>=3 ; col--)
 1e4:	21 50       	subi	r18, 0x01	; 1
 1e6:	31 09       	sbc	r19, r1
 1e8:	23 30       	cpi	r18, 0x03	; 3
 1ea:	31 05       	cpc	r19, r1
 1ec:	0c f0       	brlt	.+2      	; 0x1f0 <keypad_get_value+0xc6>
 1ee:	b3 cf       	rjmp	.-154    	; 0x156 <keypad_get_value+0x2c>
		 };
	PORTA=arr[num%10];
}
unsigned char keypad_get_value(void){
	unsigned char ans=0xff;
	for (int row=5 ; row>=2 ; row--)
 1f0:	61 50       	subi	r22, 0x01	; 1
 1f2:	71 09       	sbc	r23, r1
 1f4:	62 30       	cpi	r22, 0x02	; 2
 1f6:	71 05       	cpc	r23, r1
 1f8:	0c f0       	brlt	.+2      	; 0x1fc <keypad_get_value+0xd2>
 1fa:	9b cf       	rjmp	.-202    	; 0x132 <keypad_get_value+0x8>
				}
			}	
		}
	}
	return ans;
 1fc:	08 95       	ret

000001fe <main>:
#include "keypad.h"
#include "bit_math.h"

int main(void)
{
    seven_segment_init();
 1fe:	0e 94 66 00 	call	0xcc	; 0xcc <seven_segment_init>
	keypad_init();
 202:	0e 94 41 00 	call	0x82	; 0x82 <keypad_init>
	while (1) 
    {
		unsigned char value=keypad_get_value();
 206:	0e 94 95 00 	call	0x12a	; 0x12a <keypad_get_value>
		if (value!=0xff)
 20a:	8f 3f       	cpi	r24, 0xFF	; 255
 20c:	e1 f3       	breq	.-8      	; 0x206 <main+0x8>
		{
			display_on_seven_seg(value-'0');
 20e:	90 e0       	ldi	r25, 0x00	; 0
 210:	c0 97       	sbiw	r24, 0x30	; 48
 212:	0e 94 6a 00 	call	0xd4	; 0xd4 <display_on_seven_seg>
 216:	f7 cf       	rjmp	.-18     	; 0x206 <main+0x8>

00000218 <__divmodhi4>:
 218:	97 fb       	bst	r25, 7
 21a:	07 2e       	mov	r0, r23
 21c:	16 f4       	brtc	.+4      	; 0x222 <__divmodhi4+0xa>
 21e:	00 94       	com	r0
 220:	07 d0       	rcall	.+14     	; 0x230 <__divmodhi4_neg1>
 222:	77 fd       	sbrc	r23, 7
 224:	09 d0       	rcall	.+18     	; 0x238 <__divmodhi4_neg2>
 226:	0e 94 20 01 	call	0x240	; 0x240 <__udivmodhi4>
 22a:	07 fc       	sbrc	r0, 7
 22c:	05 d0       	rcall	.+10     	; 0x238 <__divmodhi4_neg2>
 22e:	3e f4       	brtc	.+14     	; 0x23e <__divmodhi4_exit>

00000230 <__divmodhi4_neg1>:
 230:	90 95       	com	r25
 232:	81 95       	neg	r24
 234:	9f 4f       	sbci	r25, 0xFF	; 255
 236:	08 95       	ret

00000238 <__divmodhi4_neg2>:
 238:	70 95       	com	r23
 23a:	61 95       	neg	r22
 23c:	7f 4f       	sbci	r23, 0xFF	; 255

0000023e <__divmodhi4_exit>:
 23e:	08 95       	ret

00000240 <__udivmodhi4>:
 240:	aa 1b       	sub	r26, r26
 242:	bb 1b       	sub	r27, r27
 244:	51 e1       	ldi	r21, 0x11	; 17
 246:	07 c0       	rjmp	.+14     	; 0x256 <__udivmodhi4_ep>

00000248 <__udivmodhi4_loop>:
 248:	aa 1f       	adc	r26, r26
 24a:	bb 1f       	adc	r27, r27
 24c:	a6 17       	cp	r26, r22
 24e:	b7 07       	cpc	r27, r23
 250:	10 f0       	brcs	.+4      	; 0x256 <__udivmodhi4_ep>
 252:	a6 1b       	sub	r26, r22
 254:	b7 0b       	sbc	r27, r23

00000256 <__udivmodhi4_ep>:
 256:	88 1f       	adc	r24, r24
 258:	99 1f       	adc	r25, r25
 25a:	5a 95       	dec	r21
 25c:	a9 f7       	brne	.-22     	; 0x248 <__udivmodhi4_loop>
 25e:	80 95       	com	r24
 260:	90 95       	com	r25
 262:	bc 01       	movw	r22, r24
 264:	cd 01       	movw	r24, r26
 266:	08 95       	ret

00000268 <_exit>:
 268:	f8 94       	cli

0000026a <__stop_program>:
 26a:	ff cf       	rjmp	.-2      	; 0x26a <__stop_program>
