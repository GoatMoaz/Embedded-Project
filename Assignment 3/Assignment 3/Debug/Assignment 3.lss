
Assignment 3.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000156  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000001aa  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000001aa  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000001dc  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000040  00000000  00000000  00000218  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000070a  00000000  00000000  00000258  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000005d2  00000000  00000000  00000962  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002eb  00000000  00000000  00000f34  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000ac  00000000  00000000  00001220  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000342  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    000001eb  00000000  00000000  0000160e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000030  00000000  00000000  000017f9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 7a 00 	jmp	0xf4	; 0xf4 <__vector_2>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 9e 00 	call	0x13c	; 0x13c <main>
  64:	0c 94 a9 00 	jmp	0x152	; 0x152 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initInterrupt1>:



void initInterrupt1() {
	// Enable internal pull-up resistor on PD3
	PORTD |= (1 << INT1);
  6c:	82 b3       	in	r24, 0x12	; 18
  6e:	80 68       	ori	r24, 0x80	; 128
  70:	82 bb       	out	0x12, r24	; 18

	// Set INT1 to trigger on falling edge
	MCUCR |= (1 << ISC11);
  72:	85 b7       	in	r24, 0x35	; 53
  74:	88 60       	ori	r24, 0x08	; 8
  76:	85 bf       	out	0x35, r24	; 53
	MCUCR &= ~(1 << ISC10);
  78:	85 b7       	in	r24, 0x35	; 53
  7a:	8b 7f       	andi	r24, 0xFB	; 251
  7c:	85 bf       	out	0x35, r24	; 53

	// Enable external interrupt INT1
	GICR |= (1 << INT1);
  7e:	8b b7       	in	r24, 0x3b	; 59
  80:	80 68       	ori	r24, 0x80	; 128
  82:	8b bf       	out	0x3b, r24	; 59
  84:	08 95       	ret

00000086 <flashLEDs>:
}

void flashLEDs() {
	for (int i = 0; i < 5; i++) {
  86:	80 e0       	ldi	r24, 0x00	; 0
  88:	90 e0       	ldi	r25, 0x00	; 0
  8a:	16 c0       	rjmp	.+44     	; 0xb8 <flashLEDs+0x32>
		PORTB = 0xFF; // Turn on all LEDs
  8c:	2f ef       	ldi	r18, 0xFF	; 255
  8e:	28 bb       	out	0x18, r18	; 24
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  90:	2f e9       	ldi	r18, 0x9F	; 159
  92:	36 e8       	ldi	r19, 0x86	; 134
  94:	41 e0       	ldi	r20, 0x01	; 1
  96:	21 50       	subi	r18, 0x01	; 1
  98:	30 40       	sbci	r19, 0x00	; 0
  9a:	40 40       	sbci	r20, 0x00	; 0
  9c:	e1 f7       	brne	.-8      	; 0x96 <flashLEDs+0x10>
  9e:	00 c0       	rjmp	.+0      	; 0xa0 <flashLEDs+0x1a>
  a0:	00 00       	nop
		_delay_ms(500); // Delay for half a second
		PORTB = 0x00; // Turn off all LEDs
  a2:	18 ba       	out	0x18, r1	; 24
  a4:	2f e9       	ldi	r18, 0x9F	; 159
  a6:	36 e8       	ldi	r19, 0x86	; 134
  a8:	41 e0       	ldi	r20, 0x01	; 1
  aa:	21 50       	subi	r18, 0x01	; 1
  ac:	30 40       	sbci	r19, 0x00	; 0
  ae:	40 40       	sbci	r20, 0x00	; 0
  b0:	e1 f7       	brne	.-8      	; 0xaa <flashLEDs+0x24>
  b2:	00 c0       	rjmp	.+0      	; 0xb4 <flashLEDs+0x2e>
  b4:	00 00       	nop
	// Enable external interrupt INT1
	GICR |= (1 << INT1);
}

void flashLEDs() {
	for (int i = 0; i < 5; i++) {
  b6:	01 96       	adiw	r24, 0x01	; 1
  b8:	85 30       	cpi	r24, 0x05	; 5
  ba:	91 05       	cpc	r25, r1
  bc:	3c f3       	brlt	.-50     	; 0x8c <flashLEDs+0x6>
		PORTB = 0xFF; // Turn on all LEDs
		_delay_ms(500); // Delay for half a second
		PORTB = 0x00; // Turn off all LEDs
		_delay_ms(500); // Delay for half a second
	}
}
  be:	08 95       	ret

000000c0 <rollLEDs>:

void rollLEDs() {
	for (int i = 0; i < 4; i++) {
  c0:	80 e0       	ldi	r24, 0x00	; 0
  c2:	90 e0       	ldi	r25, 0x00	; 0
  c4:	13 c0       	rjmp	.+38     	; 0xec <rollLEDs+0x2c>
		PORTB = (1 << i); // Turn on one LED at a time
  c6:	21 e0       	ldi	r18, 0x01	; 1
  c8:	30 e0       	ldi	r19, 0x00	; 0
  ca:	08 2e       	mov	r0, r24
  cc:	02 c0       	rjmp	.+4      	; 0xd2 <rollLEDs+0x12>
  ce:	22 0f       	add	r18, r18
  d0:	33 1f       	adc	r19, r19
  d2:	0a 94       	dec	r0
  d4:	e2 f7       	brpl	.-8      	; 0xce <rollLEDs+0xe>
  d6:	28 bb       	out	0x18, r18	; 24
  d8:	2f e9       	ldi	r18, 0x9F	; 159
  da:	36 e8       	ldi	r19, 0x86	; 134
  dc:	41 e0       	ldi	r20, 0x01	; 1
  de:	21 50       	subi	r18, 0x01	; 1
  e0:	30 40       	sbci	r19, 0x00	; 0
  e2:	40 40       	sbci	r20, 0x00	; 0
  e4:	e1 f7       	brne	.-8      	; 0xde <rollLEDs+0x1e>
  e6:	00 c0       	rjmp	.+0      	; 0xe8 <rollLEDs+0x28>
  e8:	00 00       	nop
		_delay_ms(500); // Delay for half a second
	}
}

void rollLEDs() {
	for (int i = 0; i < 4; i++) {
  ea:	01 96       	adiw	r24, 0x01	; 1
  ec:	84 30       	cpi	r24, 0x04	; 4
  ee:	91 05       	cpc	r25, r1
  f0:	54 f3       	brlt	.-44     	; 0xc6 <rollLEDs+0x6>
		PORTB = (1 << i); // Turn on one LED at a time
		_delay_ms(500); // Delay for half a second
	}
}
  f2:	08 95       	ret

000000f4 <__vector_2>:

ISR(INT1_vect) {
  f4:	1f 92       	push	r1
  f6:	0f 92       	push	r0
  f8:	0f b6       	in	r0, 0x3f	; 63
  fa:	0f 92       	push	r0
  fc:	11 24       	eor	r1, r1
  fe:	2f 93       	push	r18
 100:	3f 93       	push	r19
 102:	4f 93       	push	r20
 104:	5f 93       	push	r21
 106:	6f 93       	push	r22
 108:	7f 93       	push	r23
 10a:	8f 93       	push	r24
 10c:	9f 93       	push	r25
 10e:	af 93       	push	r26
 110:	bf 93       	push	r27
 112:	ef 93       	push	r30
 114:	ff 93       	push	r31
	flashLEDs();
 116:	0e 94 43 00 	call	0x86	; 0x86 <flashLEDs>
}
 11a:	ff 91       	pop	r31
 11c:	ef 91       	pop	r30
 11e:	bf 91       	pop	r27
 120:	af 91       	pop	r26
 122:	9f 91       	pop	r25
 124:	8f 91       	pop	r24
 126:	7f 91       	pop	r23
 128:	6f 91       	pop	r22
 12a:	5f 91       	pop	r21
 12c:	4f 91       	pop	r20
 12e:	3f 91       	pop	r19
 130:	2f 91       	pop	r18
 132:	0f 90       	pop	r0
 134:	0f be       	out	0x3f, r0	; 63
 136:	0f 90       	pop	r0
 138:	1f 90       	pop	r1
 13a:	18 95       	reti

0000013c <main>:

int main(void) {
	// Set LED pins as output
	DDRB = 0xFF;
 13c:	8f ef       	ldi	r24, 0xFF	; 255
 13e:	87 bb       	out	0x17, r24	; 23

	// Set INT1 pin as input
	DDRD &= ~(1 << INT1);
 140:	81 b3       	in	r24, 0x11	; 17
 142:	8f 77       	andi	r24, 0x7F	; 127
 144:	81 bb       	out	0x11, r24	; 17

	initInterrupt1();
 146:	0e 94 36 00 	call	0x6c	; 0x6c <initInterrupt1>

	// Enable global interrupts
	sei();
 14a:	78 94       	sei

	while (1) {
		rollLEDs();
 14c:	0e 94 60 00 	call	0xc0	; 0xc0 <rollLEDs>
 150:	fd cf       	rjmp	.-6      	; 0x14c <main+0x10>

00000152 <_exit>:
 152:	f8 94       	cli

00000154 <__stop_program>:
 154:	ff cf       	rjmp	.-2      	; 0x154 <__stop_program>
