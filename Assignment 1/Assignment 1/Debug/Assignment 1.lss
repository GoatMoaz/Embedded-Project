
Assignment 1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000009a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000ee  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000ee  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000120  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000030  00000000  00000000  0000015c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000573  00000000  00000000  0000018c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000504  00000000  00000000  000006ff  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000019f  00000000  00000000  00000c03  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000044  00000000  00000000  00000da4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000002a1  00000000  00000000  00000de8  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000020  00000000  00000000  00001089  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   8:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
   c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  10:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  14:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  18:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  1c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  20:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  24:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  28:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  2c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  30:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  34:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  38:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  3c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  40:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  44:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  48:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  4c:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>
  50:	0c 94 34 00 	jmp	0x68	; 0x68 <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61
  60:	0e 94 46 00 	call	0x8c	; 0x8c <main>
  64:	0c 94 4b 00 	jmp	0x96	; 0x96 <_exit>

00000068 <__bad_interrupt>:
  68:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000006c <initalize>:
#include "bit_math.h" // for bit manipulation
#include "atmga32.h" // for all external memory
 
void initalize(){
	DDRA = 0xfc;
  6c:	8c ef       	ldi	r24, 0xFC	; 252
  6e:	8a bb       	out	0x1a, r24	; 26
	PORTA = 0xf3;
  70:	83 ef       	ldi	r24, 0xF3	; 243
  72:	8b bb       	out	0x1b, r24	; 27
  74:	08 95       	ret

00000076 <display>:
}

void display(){
	if(!get_bit(PINA , 0))
  76:	c8 99       	sbic	0x19, 0	; 25
  78:	03 c0       	rjmp	.+6      	; 0x80 <display+0xa>
	set_bit(PORTA , 2);
  7a:	8b b3       	in	r24, 0x1b	; 27
  7c:	84 60       	ori	r24, 0x04	; 4
  7e:	8b bb       	out	0x1b, r24	; 27
	if (!get_bit(PINA , 1))
  80:	c9 99       	sbic	0x19, 1	; 25
  82:	03 c0       	rjmp	.+6      	; 0x8a <display+0x14>
	clr_bit(PORTA , 2);
  84:	8b b3       	in	r24, 0x1b	; 27
  86:	8b 7f       	andi	r24, 0xFB	; 251
  88:	8b bb       	out	0x1b, r24	; 27
  8a:	08 95       	ret

0000008c <main>:
}
int main(void)
{
	initalize();
  8c:	0e 94 36 00 	call	0x6c	; 0x6c <initalize>
	while(1){
		display();
  90:	0e 94 3b 00 	call	0x76	; 0x76 <display>
  94:	fd cf       	rjmp	.-6      	; 0x90 <main+0x4>

00000096 <_exit>:
  96:	f8 94       	cli

00000098 <__stop_program>:
  98:	ff cf       	rjmp	.-2      	; 0x98 <__stop_program>
